export class Tokenizer {
    constructor(str: any, opts: any);
    str: any;
    index: number;
    len: any;
    lineno: number;
    colno: number;
    in_code: boolean;
    tags: {
        BLOCK_START: any;
        BLOCK_END: any;
        VARIABLE_START: any;
        VARIABLE_END: any;
        COMMENT_START: any;
        COMMENT_END: any;
    };
    trimBlocks: boolean;
    lstripBlocks: boolean;
    nextToken(): any;
    _parseString(delimiter: any): string;
    _matches(str: any): boolean;
    _extractString(str: any): any;
    _extractUntil(charString: any): any;
    _extract(charString: any): any;
    _extractMatching(breakOnMatch: any, charString: any): any;
    _extractRegex(regex: any): any;
    isFinished(): boolean;
    forwardN(n: any): void;
    forward(): void;
    backN(n: any): void;
    back(): void;
    current(): any;
    currentStr(): any;
    previous(): any;
}
declare namespace _default {
    export function lex(src: any, opts: any): Tokenizer;
    export function lex(src: any, opts: any): Tokenizer;
    export { TOKEN_STRING };
    export { TOKEN_WHITESPACE };
    export { TOKEN_DATA };
    export { TOKEN_BLOCK_START };
    export { TOKEN_BLOCK_END };
    export { TOKEN_VARIABLE_START };
    export { TOKEN_VARIABLE_END };
    export { TOKEN_COMMENT };
    export { TOKEN_LEFT_PAREN };
    export { TOKEN_RIGHT_PAREN };
    export { TOKEN_LEFT_BRACKET };
    export { TOKEN_RIGHT_BRACKET };
    export { TOKEN_LEFT_CURLY };
    export { TOKEN_RIGHT_CURLY };
    export { TOKEN_OPERATOR };
    export { TOKEN_COMMA };
    export { TOKEN_COLON };
    export { TOKEN_TILDE };
    export { TOKEN_PIPE };
    export { TOKEN_INT };
    export { TOKEN_FLOAT };
    export { TOKEN_BOOLEAN };
    export { TOKEN_NONE };
    export { TOKEN_SYMBOL };
    export { TOKEN_SPECIAL };
    export { TOKEN_REGEX };
}
export default _default;
declare let TOKEN_STRING: string;
declare let TOKEN_WHITESPACE: string;
declare let TOKEN_DATA: string;
declare let TOKEN_BLOCK_START: string;
declare let TOKEN_BLOCK_END: string;
declare let TOKEN_VARIABLE_START: string;
declare let TOKEN_VARIABLE_END: string;
declare let TOKEN_COMMENT: string;
declare let TOKEN_LEFT_PAREN: string;
declare let TOKEN_RIGHT_PAREN: string;
declare let TOKEN_LEFT_BRACKET: string;
declare let TOKEN_RIGHT_BRACKET: string;
declare let TOKEN_LEFT_CURLY: string;
declare let TOKEN_RIGHT_CURLY: string;
declare let TOKEN_OPERATOR: string;
declare let TOKEN_COMMA: string;
declare let TOKEN_COLON: string;
declare let TOKEN_TILDE: string;
declare let TOKEN_PIPE: string;
declare let TOKEN_INT: string;
declare let TOKEN_FLOAT: string;
declare let TOKEN_BOOLEAN: string;
declare let TOKEN_NONE: string;
declare let TOKEN_SYMBOL: string;
declare let TOKEN_SPECIAL: string;
declare let TOKEN_REGEX: string;
//# sourceMappingURL=lexer.d.ts.map