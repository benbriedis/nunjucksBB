import { Obj } from './object';
export declare class Parser extends Obj {
    tokens: any;
    peeked: any;
    breakOnBlocks: any;
    dropLeadingWhitespace: any;
    extensions: any;
    init(tokens: any): void;
    nextToken(withWhitespace?: any): any;
    peekToken(): any;
    pushToken(tok: any): void;
    error(msg: any, lineno: any, colno: any): any;
    fail(msg: any, lineno?: any, colno?: any): void;
    skip(type: any): boolean;
    expect(type: any): any;
    skipValue(type: any, val: any): boolean;
    skipSymbol(val: any): boolean;
    advanceAfterBlockEnd(name?: any): any;
    advanceAfterVariableEnd(): void;
    parseFor(): any;
    parseMacro(): any;
    parseCall(): any;
    parseWithContext(): any;
    parseImport(): any;
    parseFrom(): import("./nodes").FromImport;
    parseBlock(): any;
    parseExtends(): any;
    parseInclude(): any;
    parseIf(): any;
    parseSet(): any;
    parseSwitch(): any;
    parseStatement(): any;
    parseRaw(tagName?: any): any;
    parsePostfix(node: any): any;
    parseExpression(): any;
    parseInlineIf(): any;
    parseOr(): any;
    parseAnd(): any;
    parseNot(): any;
    parseIn(): any;
    parseIs(): any;
    parseCompare(): any;
    parseConcat(): any;
    parseAdd(): any;
    parseSub(): any;
    parseMul(): any;
    parseDiv(): any;
    parseFloorDiv(): any;
    parseMod(): any;
    parsePow(): any;
    parseUnary(noFilters?: any): any;
    parsePrimary(noPostfix?: any): any;
    parseFilterName(): any;
    parseFilterArgs(node: any): any;
    parseFilter(node: any): any;
    parseFilterStatement(): any;
    parseAggregate(): any;
    parseSignature(tolerant?: any, noParens?: any): import("./nodes").NodeList;
    parseUntilBlocks(...blockNames: any[]): import("./nodes").NodeList;
    parseNodes(): any[];
    parse(): import("./nodes").NodeList;
    parseAsRoot(): any;
}
declare function parse(src: any, extensions: any, opts: any): any;
declare const _default: {
    parse: typeof parse;
    Parser: typeof Parser;
};
export default _default;
//# sourceMappingURL=parser.d.ts.map