FUNCTIONALITY
> Remove or separate Express integration into separate project
> Remove or separate chokidar watch into separate project
> Would like option to insist on closed html (or whatever) tags within NJK tags
> Remove Jinja compatible mode (but see what it has to offere first)
> Ensure null and undefined are always interchangeable
> Hide JS object function calls, but first include any useful ones as filters, functions, etc
> Trawl Jinja and Twig for useful filters and functions
> MAYBE an option to disable 'include'. But NB I do like being able to dynamically construct
  include file names
> Remove explicit 'null' and 'undefined' in templates. Use 'none' instead.

RE Loaders:
1. Move existing FileLoader to eg WatchLoader / ServerWatchLoader /... and strip out chokidar from main FileLoader
2. Rename WebLoader to eg WebWatchLoader
3. Make a loader compulsary. eg specifiy PrecompiledLoader
4. Just have 1 loader


CODING
> Remove weird (old?) object stuff in objects.js
> Remore asyncFor, asyncAll, asyncIf
> WebLoader - allow dynamic fetch to be disabled. Should be able to run on server for testing purposes.
> Thinks the precompile API might be broken
> Convert everything to Typescript. Enable strict mode, including noImplicityAny and strictNullChecks
> Errors and stack traces should be better
> Dont like those Eslint settings. Use a code beautifer on Github commit instead?
> Is there any server code that code be omitted from the browser bundles?
> Building a 'src' directory in the root is not nice. Maybe create a 'dist' or something if this required.
  Move 'nunjucks' subdirectory contents up.
  Probably a Babel thing... may be able just to use Typescript
> nodes.ts and compiler.js are using an unhealthy number of dynamic calls

> Maybe I do need to remove the final trailing \n from template files. Basically impossible to remove otherwise. But where?
    Probably FileLoader makes most sense... 

DOCUMENTATION
> think 'none' is undocumented
> Remove 'value' from 'default(value, default, [boolean])', its very confusing

WORK DONE
> Removed Express app. 
  WHY? Its easy to use Nunjucks in Express without it, and this is just more fussy detail that needs to be maintained.
> Removed optional second argument in 'default()' filter.
  WHY? Historical backward-compatibity thing. Confusing and time to move on.
> Modified 'default()' so that it treats 'null' as the same as 'undefined.'
  WHY? Javascript has an awkward distinction between 'null' and 'undefined'. 
  It also has a concept of 'nullish' whereby null==undefined (note though that null!==undefined), which helps a bit
  It is probably best to simplify things in Nunjucks by mapping both 'null' and 'undefined' to 'none' in Nunjucks. 
  Note that custom filters and globals could potentially return 'null's or 'undefined's and these both need to be handled.



TODO 
> update doco with work done

