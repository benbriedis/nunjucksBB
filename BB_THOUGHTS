
WORK DONE
> Added async/await all over the place, including within the compiled code. 
  Should backwards compatibility be required then Babel is 
  a possibility.
> Removed asyncFor, asyncAll, asyncIf, async filters, etc
> Converted a fair bit of stuff over to Typescript.
> Removed Express app. 
  WHY? Non-essential, and I didn't want to port it. Not sure how useful it is - I use Express and I don't use this
  functionality. I doubt it would be powerful enough for my use case. Could be put in a separate repo.
> Removed optional second argument in 'default()' filter.
  WHY? Historical backward-compatibity thing. Confusing and time to move on.
> Modified 'default()' so that it treats 'null' the same as 'undefined.'
  WHY? Javascript has an awkward distinction between 'null' and 'undefined'. 
  It also has a concept of 'nullish' whereby null==undefined (note though that null!==undefined), which helps a bit
  It is probably best to simplify things in Nunjucks by mapping both 'null' and 'undefined' to 'none' in Nunjucks. 
  Note that custom filters and globals could potentially return 'null's or 'undefined's and these both need to be handled.
> Removed tests/cli.js
  WHY? I prefer to run unit tests within the Javascript code, and leave command line calls etc out of it. These tests
  are fussy and problematic to maintain, and often require running on multiple platforms. I feel these types of tests lie 
  outside the purview of unit testing.
> Removed eslint for the moment. Not finding it useful and don't like the code formatting settings. Better to concentrate
  on moving to strict Typescript. Would be nice to auto-apply a code formatter on commit, if anything reasonable exists.
> Removed NodeResolveLoader and watch from FileSystemLoader
  WHY? Easier to port and easier for me to maintain. I dont use these these things.
  NodeResolveLoader could be a plugin and its probably cleaner to put file watch into a separate loader.
> Removed the Nunjucks singletons.
  WHY? Because they are singletons.
> Removed EventEmitter.
  WHY? Might be useful adding something back in once it has stabilised. Better not to be Node-specific.
       If the code is to become more generator-based, might be better to sort this stuff out first.


DESIRED FUNCTIONALITY
> Fold in some or all of the Jinja compatible stuff or else delete it. 
  Nunjucks is a bit short on the string and array manipulation stuff and slices etc would be useful.
  At times I find myself using the undocumented JS String methods to make up for missing Nunjucks functionality. 
  These undocumented things should be hidden, and any useful stuff either built in or put into filters.
  Also trawl Jinja and Twig for useful filters and function that are missing from Nunjucks.
  DONT think that Nunjucks should slavishly copy Jinja though. Should be 'Javascript first'.
> 'null' and 'undefined'(?) are available in templates, but I think undocumented. Remove them and use 'none' instead 
   (which would be implemented as "nullish").
> Would like a compile option that requires html tags to be closed within NJK control structures. 
  This would remove an advantage that Vue etc has over Nunjucks.
  Could be applied to XML etc too if used with Nunjucks.
  Could be done with a call to a plugin and the plugin calls an external language parser.
> Combine null and undefined
> Combine == & ===
> Maybe "{% if musicEmbedExists %}" to mean "true or not null"?  ie in boolean contexts null==>false, all else ==>true   
  Still want to be able to test these things individual somehow. Think about. cf an 'exists' or 'defined' keyword, function, or symbol.
> Copy other string ops over from String, Number, etc. Reference against Twig and Jinja.
> Dont allow macros to be imported in parents
> Better error handling - including line numbers - including macros as much as practical
> Dont like the 'call' feature. Adds an extra hidden parameter to the macro and then requires special syntax in the definition.
> Might be better off with no include and no extends and just use macros. 
> Could really to with a way of returning a data structure from a macro or something like a macro - eg:
		{%- macro hoursTypes(types) -%}
			{{ types|setAttribute('value',{
				'mon':		'Monday',
				'tue':		'Tuesday',
				'wed':		'Wednesday',
				'thu':		'Thursday',
				'fri':		'Friday',
				'sat':		'Saturday',
				'sun':		'Sunday',
				'holidays':	'Public Holidays',
				'other':	'Other'
			}) }}
		{%- endmacro -%}
  can be used to pass values to selects as well as for looking up individual values for display.
  They are display things and should be included in NJK. Including everything in the top script is
  pretty bad. I suppose could get away with 2 macros: one a lookup and one that creates a select... but
  this is probably overly restrictive on the select.
  	cf "datamacro/macrodata" or something
  

DOCUMENTATION IDEAS
> Documentation should mention the possibility of using MorphDOM etc to provide for reactive programming.
  Might attract more users.
> Documentation could mention a 'Javascript first' philosophy. A problem with twig.js and others are they are always
  subservient to other compiler implementations written in other languages. Nunjucks can be run on the server and browser 
  using the same library.
> Another advantage is that it keeps its code is distinct from the HTML, unlike some other templating languages.
> Also does require an understanding of Javascript. Easy for non-JS frontend developers to use.
> Think 'none' is undocumented
> Remove 'value' from 'default(value, default, [boolean])', its very confusing


CODING
> Remove weird (old?) object stuff in objects.js
> Convert everything to Typescript. Enable strict mode, including noImplicityAny and strictNullChecks
> Use a code beautifer on Github commit for formatting? Not sure JS-land has anything good enough though.
> nodes.ts and compiler.js are using an unhealthy number of dynamic calls

> Maybe I do need to remove the final trailing \n from template files. Basically impossible to remove otherwise. But where?
    Probably FileSystemLoader makes most sense... 
> Use of generators would be nice. 
  - Useful if the parser would be installed separately for syntax checking, IDE integration, etc
  - One thing I noticed... should make error reporting much easier as you dont need to store all the context information with
    the errors... instead you can generate the errors more on the fly

TODO 
> CLI might be broken.
> update doco with work done
> Just specify a single loader, and make it compulsary. Don't have a default loader. 
  I think this would be clearer that the current setup. 
> Have a separate FileWatchLoader.
  Rename WebLoader to eg WebWatchLoader
> Copy over my jsdump() with folding
> The slim build + some of the package.json script lines depend on Bash. 

